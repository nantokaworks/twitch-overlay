version: "3"

tasks:
  # フロントエンドビルド
  build:frontend:
    desc: フロントエンドをビルド
    dir: web
    cmds:
      - echo "フロントエンドをビルド中..."
      - bun run build
      - echo "フロントエンドビルド完了 → dist/public/"

  # バックエンドビルド
  build:backend:
    desc: バックエンドをビルド
    dir: cmd/twitch-overlay
    vars:
      VERSION:
        sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
      COMMIT:
        sh: git rev-parse --short HEAD 2>/dev/null || echo "unknown"
      BUILD_TIME:
        sh: date -u '+%Y-%m-%d %H:%M:%S UTC'
    cmds:
      - echo "バックエンドをビルド中..."
      - |
        go build -ldflags "\
          -X 'github.com/nantokaworks/twitch-overlay/internal/version.Version={{.VERSION}}' \
          -X 'github.com/nantokaworks/twitch-overlay/internal/version.Commit={{.COMMIT}}' \
          -X 'github.com/nantokaworks/twitch-overlay/internal/version.BuildTime={{.BUILD_TIME}}'" \
          -o ../../dist/twitch-overlay .
      - echo "バックエンドビルド完了 → dist/twitch-overlay"
      - |
        if [ -f .env ]; then
          cp .env ../../dist/.env
          echo ".envファイルをコピーしました → dist/.env"
        fi
      - |
        # dist/local.dbが既に存在する場合は上書きしない
        if [ -f ../../dist/local.db ]; then
          echo "local.dbファイルは既に存在します → dist/local.db (上書きしません)"
        elif [ -f local.db ]; then
          cp local.db ../../dist/local.db
          echo "local.dbファイルをコピーしました → dist/local.db"
        fi

  # 統合ビルド
  build:all:
    desc: フロントエンドとバックエンドを両方ビルド
    cmds:
      - task: clean
      - task: build:frontend
      - task: build:backend
      - echo "全ビルド完了！"
      - echo "実行 → ./dist/twitch-overlay"

  # クリーンアップ
  clean:
    desc: ビルドファイルをクリーンアップ
    cmds:
      - echo "ビルドファイルをクリーンアップ中..."
      - |
        # local.dbを一時的に退避
        if [ -f dist/local.db ]; then
          echo "local.dbを退避中..."
          mv dist/local.db /tmp/twitch-overlay-local.db.tmp
        fi
      - |
        # .envファイルも退避
        if [ -f dist/.env ]; then
          echo ".envを退避中..."
          mv dist/.env /tmp/twitch-overlay-env.tmp
        fi
      - rm -rf dist
      - rm -rf web/dist
      - mkdir -p dist
      - |
        # local.dbを復元
        if [ -f /tmp/twitch-overlay-local.db.tmp ]; then
          echo "local.dbを復元中..."
          mv /tmp/twitch-overlay-local.db.tmp dist/local.db
        fi
      - |
        # .envを復元
        if [ -f /tmp/twitch-overlay-env.tmp ]; then
          echo ".envを復元中..."
          mv /tmp/twitch-overlay-env.tmp dist/.env
        fi
      - echo "クリーンアップ完了"

  # 開発サーバー起動（フロントエンド）
  dev:frontend:
    desc: フロントエンド開発サーバーを起動
    dir: web
    cmds:
      - bun run dev

  # 開発サーバー起動（バックエンド）
  dev:backend:
    desc: バックエンド開発サーバーを起動
    dir: cmd/twitch-overlay
    cmds:
      - air

  # Claude
  claude:
    desc: Claude起動
    cmds:
      - claude --dangerously-skip-permissions

  # twitch-overlayプロセスを停止
  stop:
    desc: 実行中のtwitch-overlayを停止
    cmds:
      - echo "twitch-overlayプロセスを停止中..."
      - pkill -f twitch-overlay || echo "実行中のtwitch-overlayプロセスが見つかりませんでした"

  # ビルド済みアプリケーションを実行
  run:
    desc: ビルド済みのtwitch-overlayを実行
    dir: dist
    cmds:
      - |
        if [ ! -f twitch-overlay ]; then
          echo "エラー: dist/twitch-overlay が見つかりません"
          echo "先に 'task build:all' でビルドしてください"
          exit 1
        fi
      - echo "twitch-overlayを起動中..."
      - exec ./twitch-overlay

  # テスト実行
  test:
    desc: 全テストを実行
    env:
      DRY_RUN_MODE: "true"
    cmds:
      - echo "テストを実行中..."
      - go test ./...

  # 配布用パッケージ作成
  package:
    desc: 配布用パッケージを作成
    deps: [build:all]
    cmds:
      - echo "配布用パッケージを作成中..."
      - mkdir -p dist-package
      - cp -r dist/* dist-package/
      - cp .env.template dist-package/
      - |
        if [ -f .env ]; then
          cp .env dist-package/.env
          echo ".envファイルをコピーしました"
        elif [ -f cmd/twitch-overlay/.env ]; then
          cp cmd/twitch-overlay/.env dist-package/.env
          echo "cmd/twitch-overlay/.envファイルをコピーしました"
        fi
      - echo "パッケージ作成完了 → dist-package/"

  # systemdサービスインストール
  service:install:
    desc: systemdサービスをインストール（Linux）
    cmds:
      - |
        if [ ! -f scripts/install-service.sh ]; then
          echo "エラー: scripts/install-service.sh が見つかりません"
          exit 1
        fi
      - echo "systemdサービスをインストールします..."
      - bash scripts/install-service.sh {{.CLI_ARGS}}

  # systemdサービスアンインストール
  service:uninstall:
    desc: systemdサービスをアンインストール（Linux）
    vars:
      USERNAME:
        sh: echo ${1:-$USER}
    cmds:
      - echo "systemdサービスをアンインストールします..."
      - sudo systemctl stop twitch-overlay@{{.USERNAME}}.service || true
      - sudo systemctl disable twitch-overlay@{{.USERNAME}}.service || true
      - sudo rm -f /etc/systemd/system/twitch-overlay@{{.USERNAME}}.service
      - sudo systemctl daemon-reload
      - echo "アンインストール完了"

  # サービス再起動
  service:restart:
    desc: systemdサービスを再起動
    vars:
      USERNAME:
        sh: echo ${1:-$USER}
    cmds:
      - echo "twitch-overlay@{{.USERNAME}}.service を再起動します..."
      - sudo systemctl restart twitch-overlay@{{.USERNAME}}.service
      - echo "再起動完了"
      - sudo systemctl status twitch-overlay@{{.USERNAME}}.service --no-pager

  # サービス起動
  service:start:
    desc: systemdサービスを起動
    vars:
      USERNAME:
        sh: echo ${1:-$USER}
    cmds:
      - echo "twitch-overlay@{{.USERNAME}}.service を起動します..."
      - sudo systemctl start twitch-overlay@{{.USERNAME}}.service
      - echo "起動完了"
      - sudo systemctl status twitch-overlay@{{.USERNAME}}.service --no-pager

  # サービス停止
  service:stop:
    desc: systemdサービスを停止
    vars:
      USERNAME:
        sh: echo ${1:-$USER}
    cmds:
      - echo "twitch-overlay@{{.USERNAME}}.service を停止します..."
      - sudo systemctl stop twitch-overlay@{{.USERNAME}}.service
      - echo "停止完了"

  # サービスステータス確認
  service:status:
    desc: systemdサービスの状態を確認
    vars:
      USERNAME:
        sh: echo ${1:-$USER}
    cmds:
      - sudo systemctl status twitch-overlay@{{.USERNAME}}.service --no-pager

  # SSHトンネル開始（heimdall）
  tunnel:heimdall:
    desc: heimdallへのSSHトンネルを開始（ポート3456）
    cmds:
      - echo "heimdallへのSSHトンネルを開始します (localhost:3456 -> heimdall:3456)"
      - ssh -L 3456:localhost:3456 heimdall -N &
      - echo "SSHトンネルが開始されました"
      - echo "ブラウザで http://localhost:3456 にアクセスしてください"

  # SSHトンネル停止
  tunnel:stop:
    desc: SSHトンネルを停止
    cmds:
      - echo "SSHトンネルを停止します..."
      - pkill -f "ssh.*3456.*heimdall" || true
      - echo "SSHトンネルが停止されました"

  # サービスログ確認（リアルタイム）
  service:logs:
    desc: systemdサービスのログをリアルタイムで表示
    vars:
      USERNAME:
        sh: echo ${1:-$USER}
    cmds:
      - sudo journalctl -u twitch-overlay@{{.USERNAME}}.service -f

  # サービスログ確認（最新50行）
  service:logs:tail:
    desc: systemdサービスの最新ログを表示
    vars:
      USERNAME:
        sh: echo ${1:-$USER}
      LINES:
        sh: echo ${2:-50}
    cmds:
      - sudo journalctl -u twitch-overlay@{{.USERNAME}}.service -n {{.LINES}} --no-pager

  # サービスエラーログ確認
  service:logs:error:
    desc: systemdサービスのエラーログのみ表示
    vars:
      USERNAME:
        sh: echo ${1:-$USER}
    cmds:
      - sudo journalctl -u twitch-overlay@{{.USERNAME}}.service -p err --no-pager
