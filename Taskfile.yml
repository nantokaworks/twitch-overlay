version: "3"

tasks:
  # フロントエンドビルド
  build:frontend:
    desc: フロントエンドをビルド
    dir: web
    cmds:
      - echo "フロントエンドをビルド中..."
      - bun run build
      - echo "フロントエンドビルド完了 → dist/public/"

  # バックエンドビルド
  build:backend:
    desc: バックエンドをビルド
    dir: cmd/twitch-fax
    vars:
      VERSION:
        sh: git describe --tags --always --dirty 2>/dev/null || echo "dev"
      COMMIT:
        sh: git rev-parse --short HEAD 2>/dev/null || echo "unknown"
      BUILD_TIME:
        sh: date -u '+%Y-%m-%d %H:%M:%S UTC'
    cmds:
      - echo "バックエンドをビルド中..."
      - |
        go build -ldflags "\
          -X 'github.com/nantokaworks/twitch-fax/internal/version.Version={{.VERSION}}' \
          -X 'github.com/nantokaworks/twitch-fax/internal/version.Commit={{.COMMIT}}' \
          -X 'github.com/nantokaworks/twitch-fax/internal/version.BuildTime={{.BUILD_TIME}}'" \
          -o ../../dist/twitch-fax .
      - echo "バックエンドビルド完了 → dist/twitch-fax"
      - |
        if [ -f .env ]; then
          cp .env ../../dist/.env
          echo ".envファイルをコピーしました → dist/.env"
        fi
      - |
        if [ -f local.db ]; then
          cp local.db ../../dist/local.db
          echo "local.dbファイルをコピーしました → dist/local.db"
        fi

  # find-faxツールビルド
  build:find-fax:
    desc: find-faxツールをビルド
    dir: cmd/find-fax
    cmds:
      - echo "find-faxをビルド中..."
      - go build -o ../../dist/find-fax .
      - echo "find-faxビルド完了 → dist/find-fax"

  # 統合ビルド
  build:all:
    desc: フロントエンドとバックエンドを両方ビルド
    cmds:
      - task: clean
      - task: build:frontend
      - task: build:backend
      - task: build:find-fax
      - echo "全ビルド完了！"
      - echo "実行 → ./dist/twitch-fax"

  # クリーンアップ
  clean:
    desc: ビルドファイルをクリーンアップ
    cmds:
      - echo "ビルドファイルをクリーンアップ中..."
      - rm -rf dist
      - rm -rf web/dist
      - echo "クリーンアップ完了"

  # 開発サーバー起動（フロントエンド）
  dev:frontend:
    desc: フロントエンド開発サーバーを起動
    dir: web
    cmds:
      - bun run dev

  # 開発サーバー起動（バックエンド）
  dev:backend:
    desc: バックエンド開発サーバーを起動
    dir: cmd/twitch-fax
    cmds:
      - air

  # Claude
  claude:
    desc: Claude起動
    cmds:
      - claude --dangerously-skip-permissions

  # twitch-faxプロセスを停止
  stop:
    desc: 実行中のtwitch-faxを停止
    cmds:
      - echo "twitch-faxプロセスを停止中..."
      - pkill -f twitch-fax || echo "実行中のtwitch-faxプロセスが見つかりませんでした"

  # ビルド済みアプリケーションを実行
  run:
    desc: ビルド済みのtwitch-faxを実行
    dir: dist
    cmds:
      - |
        if [ ! -f twitch-fax ]; then
          echo "エラー: dist/twitch-fax が見つかりません"
          echo "先に 'task build:all' でビルドしてください"
          exit 1
        fi
      - echo "twitch-faxを起動中..."
      - exec ./twitch-fax

  # テスト実行
  test:
    desc: 全テストを実行
    env:
      DRY_RUN_MODE: "true"
    cmds:
      - echo "テストを実行中..."
      - go test ./...

  # 配布用パッケージ作成
  package:
    desc: 配布用パッケージを作成
    deps: [build:all]
    cmds:
      - echo "配布用パッケージを作成中..."
      - mkdir -p dist-package
      - cp -r dist/* dist-package/
      - cp .env.template dist-package/
      - |
        if [ -f .env ]; then
          cp .env dist-package/.env
          echo ".envファイルをコピーしました"
        elif [ -f cmd/twitch-fax/.env ]; then
          cp cmd/twitch-fax/.env dist-package/.env
          echo "cmd/twitch-fax/.envファイルをコピーしました"
        fi
      - echo "パッケージ作成完了 → dist-package/"
